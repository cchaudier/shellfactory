#@(#)=======================================================================
#@(#)    Nom : log.lib
#@(#)    Objet : Fonctions de log
#@(#)    Entree :  
#@(#)    Sortie : 
#@(#)    Date de creation : 20/05/14
#@(#)    Auteur : Christophe Chaudier www.cchaudier.fr
#@(#)    Commentaires :
#@(#)======================================================================

# sflib_log_init
# Test et initialise les variables utils aux logs
# USAGE : sflib_log_init
# ----------------------------------------------

sflib_log_init() {
# TODO : si sflib_std non chargé alors la charger car c'est une lib dépendante
# TODO definir fic_log et rep_log
# TODO changer le nom SEVERITE
    output=screen # affichage des erreurs à l'ecran
sflib_log_debug "DEBUT fct sflib_log_init()"
    export SEVERITE=0
    PERE=$PPID
    FILS=$$
    PID=$$

    if ! tty -s; then
        #Comme le script n'est pas lancé en ligne de commande on trace dans un fichier
        output=file #Sortie des traces dans un fichier uniquement
	      sflib_log_create
    fi

sflib_log_debug "FIN fct sflib_log_init()"
}

# sflib_log_sortie
# sortie de la lib proprement
# USAGE : sflib_log_sortie
# ----------------------------------------------
sflib_log_sortie() {
sflib_log_debug "DEBUT fct sflib_log_sortie()"
    unset PERE
    unset FILS
    unset PID
    if [[ $output == "screen" ]]; then
        sflib_std_rm $fic_log
    else
        trace "Le fichier de log est : $fic_log"
    fi
sflib_log_debug "FIN fct sflib_log_sortie()"
}

# sflib_log_create
# Creation et initialisation de la log
# USAGE : sflib_log_create
# ----------------------------------------------
sflib_log_create() { 
sflib_log_debug "DEBUT fct sflib_log_create()"
        if [[ -z "$rep_log" ]]; then
            printf '\033[1;31;40m'
            echo "ERREUR : Variable rep_log vide"
            printf '\033[0m'
            output="screen"
            echo "$type|$(sflib_log_date) : $msg"
        else
#TODO verifier que script_nom est bien définit
            date_log=$(sflib_log_date)
            fic_log=${rep_log}/${script_nom}_${datelog}_${PID}.log

            sflib_std_rep_create ${rep_log}
            sflib_std_fic_create ${fic_log}
        fi
#TODO utiliser un tableau de hachage log pour rep,fic et date
sflib_log_debug "FIN fct sflib_std_logCreate()"
}

# sflib_log_date
# renvoi une date formaté pour les traces log
# USAGE : sflib_log_date
sflib_log_date() {
  date '+%y%m%d_%Hh%Mm%S'
}

# sflib_log_debug
# Affiche le message si le script est en mode debug
# USAGE : sflib_log_debug "message"
#----------------------------
sflib_log_debug() {
    msg_debug=$*
    if [[ $DEBUG -eq 1 ]]; then
        sflib_log_trace "==[DEBUG]== $msg_debug" D
    fi
}

# sflib_log_print_color
# Affiche la log en couleur en fonction du type
# USAGE : sflib_log_print_color <message> [type de trace] 
sflib_log_print_color() {
    msg=$1
    type=$2
    case $type in
#TODO Definir les couleurs avec des noms compréhensibles
        E)  printf '\033[1;31;40m' ;;
        W)  printf '\033[1;33;40m' ;;
        D)  printf '\033[1;35;40m' ;;        
        *)  printf '\033[1;37;40m' ;;
    esac
    echo "$type|$(sflib_log_date) : $msg"
    printf '\033[0m'
}

# sflib_log_trace
# fonction de log principal
# USAGE : sflib_log_trace <message> [type de trace] 
# type :  I W E D
#	I : information
#	W : warning
#	E : erreur
#	D : debug
# Si la fonction est appeler sans le type alors le type utilisé est I
# Si la variable output existe, elle définit la sortie : 
#		file = on ecrit dans un fichier (la variable fic_log doit être renseignée)
#		both = on ecrit dans un fichier (la variable fic_log doit être renseignée) ET à l'ecran
#		sinon : on ecrit à l'ecran, avec gestion des couleurs
sflib_log_trace() {
    msg=$1
    if [[ $# -eq 2 ]]; then
        type=$2
    else
        type=I
    fi
    
    case $output in
    file) echo "$type|$(sflib_log_date) : $msg" >> $fic_log
        ;;
    both)
	echo "$type|$(sflib_date_date) : $msg" >> $fic_log
        sflib_log_print_color "$msg" $type
        ;;        
    *) sflib_log_print_color "$msg" $type
        ;;
    esac
}

#Fonction de traces racourcit
trace() {
  sflib_log_trace "[*] $*" I
}

warning() {
  sflib_log_trace "[=] $*" W
}

erreur() {
  sflib_log_trace "[-] $*" E
}

debug() {
  sflib_log_debug "[D] $*"
}
